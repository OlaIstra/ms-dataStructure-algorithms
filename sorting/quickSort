//Quicksort, как правило, считается самой эффективной и быстрой и 
//поэтому используется в V8 как реализация Array.prototype.sort() 
//для массивов с более чем 23 элементами. 
//Для менее чем 23 элемента в V8 используется insertion sort2.
//Merge sort - конкурент quicksort, аналогично ему он также эффективный и быстрый, 
//но имеет дополнительное преимущество - устойчивость. 
//Поэтому Mozilla и Safari используют Merge sort для имплементации Array.prototype.sort().

function swap(arr, idx1, idx2){
  let temp = arr[idx1]
  arr[idx1] = arr[idx2]
  arr[idx2] = temp
}

function quickSort(items) {
  return quickSortHelper(items, 0, items.length-1);
}

function quickSortHelper(items, left, right) {
  let index;
  if (items.length > 1) {
    index = partition(items, left, right);
   
    if (left < index - 1) {
      quickSortHelper(items, left, index - 1);
    }

    if (index < right) {
      quickSortHelper(items, index, right);
    }
  }
  return items;
}

function partition(array, left, right) {
  var pivot = array[Math.floor((right + left) / 2)];
  while (left <= right) {
    while (pivot > array[left]) {
      left++;
    }
    while (pivot < array[right]) {
      right--;
    }
    if (left <= right) {
      swap(array, array[left], array[right])
      left++;
      right--;
    }
  }
  return left;
}
quickSort([6,1,23,4,2,3]); // [1, 2, 3, 4, 6, 23]
//Time Complexity: O(nlog2(n)) on average, O(n2) for worst case
//Space Complexity: O(log2(n))

const quickSort2 = function(arr) {
  if(array.length < 2) {
    return array;
  }

  var pivot = array[0];
  var left = [];
  var right = [];

  for (var i = 1; i < array.length; i++) {
    if ( array[i] > pivot ) {
      right.push(array[i]);
    } else {
      left.push(array[i]);
    }
  }

  return [...quickSortBasic(left), pivot, ...quickSortBasic(right)]

};
